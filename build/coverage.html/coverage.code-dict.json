{"/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/test.js":"/* istanbul instrument in package npmtest_generator_ng_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/lib.npmtest_generator_ng_fullstack.js":"/* istanbul instrument in package npmtest_generator_ng_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_ng_fullstack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_ng_fullstack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-ng-fullstack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_ng_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_ng_fullstack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_ng_fullstack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_ng_fullstack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_ng_fullstack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_ng_fullstack.__dirname + '/lib.npmtest_generator_ng_fullstack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/index.js":"\"use strict\";\n\nconst {Base} = require('yeoman-generator');\nconst {MainGenerator} = require('../_ng/full/generator');\n\nmodule.exports = class NgFullstack extends Base {\n    constructor(args, options, config) {\n        super(args, options, config);\n\n        this.generator = new MainGenerator(this);\n    }\n\n    initializing() {\n      this.pkg = require('../package.json');\n    }\n\n    prompting() {\n      this.generator.sayHello();\n    }\n\n    writing() {\n      this.generator.writing();\n    }\n\n    install() {\n      this.generator.install();\n    }\n\n    prompUser() {\n      this.generator.promptUser();\n    }\n\n    promptClient() {\n      this.generator.promptClient();\n    }\n\n    promptStylePreprocessor() {\n      this.generator.promptStylePreprocessor();\n    }\n\n    promptServer() {\n      this.generator.promptServer();\n    }\n\n    promptNodeWebFrameworkServer() {\n      this.generator.promptNodeWebFrameworkServer();\n    }\n\n    promptUserTranspilerServer() {\n      this.generator.promptTranspilerServer();\n    }\n\n    promptGoWebFrameworkServer() {\n      this.generator.promptGoWebFrameworkServer();\n    }\n\n    promptSecure() {\n      this.generator.promptSecure();\n    }\n\n    promptTests() {\n      this.generator.promptTests();\n    }\n\n    promptDifferentStaticServer() {\n      this.generator.promptDifferentStaticServer();\n    }\n\n    promptCordova() {\n      this.generator.promptCordova();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/full/generator.js":"\"use strict\";\n\nconst chalk = require('chalk');\nconst yosay = require('yosay');\nconst {NodeFactory} = require('../server/node_factory');\nconst {GoFactory} = require('../server/go_factory');\nconst {AngularFactory} = require('../client/angular');\nconst {AureliaFactory} = require('../client/aurelia');\nconst {VueFactory} = require('../client/vue');\nconst {ClientFactory} = require('../client/client_factory');\nconst {ServerFactory} = require('../server/server_factory');\n\nexports.MainGenerator = class MainGenerator {\n  constructor(gen) {\n    this.wrapper = gen;\n  }\n\n  sayHello() {\n    this.wrapper.log(yosay('Welcome to the terrific ' + chalk.green('NgFullstack') + ' generator!'));\n  }\n\n  writing() {\n      let _app = {app: this.wrapper.appName};\n      let _user = {\n        username: this.wrapper.username,\n        userEmail: this.wrapper.userEmail,\n        userNameSpace: this.wrapper.userNameSpace\n      };\n      let _repoHostUrl = {repoHostUrl: this.wrapper.repoHostUrl};\n      let _server = this.wrapper.server;\n      let _testsSeparated = this.wrapper.testsSeparated;\n      let _transpilerServer = this.wrapper.transpilerServer;\n      let _client = this.wrapper.client;\n      let _copiesServer = (this.wrapper.stack === \"fullstack\") || (this.wrapper.stack === \"server\");\n      let _copiesClient = (this.wrapper.stack === \"fullstack\") || (this.wrapper.stack === \"client\");\n      let _clientOnly = this.wrapper.stack === \"client\";\n      let _serverOnly = this.wrapper.stack === \"server\";\n      let _secure = this.wrapper.secure;\n      let _usesTypescript = (_transpilerServer === \"typescript\") || (_client === \"ng2\");\n      let _stylePreprocessor = this.wrapper.stylePreprocessor;\n\n      this.wrapper.template('_README.md', 'README.md', {\n        app: _app.app,\n        userNameSpace: _user.userNameSpace\n      });\n\n      this.wrapper.template('_package.json', 'package.json', {\n        app: _app.app,\n        username: _user.username,\n        repoHostUrl: _repoHostUrl.repoHostUrl,\n        userNameSpace: _user.userNameSpace,\n        usesTypescript: _usesTypescript,\n        client: _client,\n        secure: _secure,\n        clientOnly: _clientOnly,\n        nodeWebFrameworkServer: this.wrapper.nodeWebFrameworkServer,\n        testsSeparated: _testsSeparated,\n        stylePreprocessor: _stylePreprocessor,\n        server: _server\n      });\n\n      this.wrapper.template('_gulpfile.babel.js', 'gulpfile.babel.js', _app);\n      this.wrapper.template('_karma.conf.js', 'karma.conf.js', {\n        app: _app.app,\n        testsSeparated: _testsSeparated\n      });\n      this.wrapper.template('_protractor.conf.js', 'protractor.conf.js', _app);\n      this.wrapper.template('_newrelic.js', 'newrelic.js', _app);\n      this.wrapper.template('_procfile.txt', 'procfile.txt', _app);\n      this.wrapper.template('_.bowerrc', '.bowerrc');\n      this.wrapper.template('_.travis.yml', '.travis.yml', {\n        typescript: _usesTypescript\n      });\n      this.wrapper.template('_.gitignore', '.gitignore');\n      this.wrapper.template('_.editorconfig', '.editorconfig');\n      this.wrapper.template('_.jshintrc','.jshintrc');\n      this.wrapper.template('_.babelrc', '.babelrc');\n      this.wrapper.template('tasks/index.js', 'tasks/index.js', {\n        nodeServer: _server === ServerFactory.tokens().NODE && !_clientOnly,\n        serverOnly: _serverOnly\n      });\n\n      this.wrapper.directory('tests/e2e', 'tests/e2e');\n\n      if (!_serverOnly) {\n        this.wrapper.template('_.alivrc', '.alivrc', {\n          secure: _secure\n        });\n      }\n\n      if (_secure && !_clientOnly) {\n        this.wrapper.directory('cert', 'server/cert');\n      }\n\n      if (_copiesClient) {\n        if (_client === AngularFactory.tokens().NG1) {\n          this.wrapper.template('_bower.json', 'bower.json', {\n            app: _app.app,\n            username: _user.username,\n            userEmail: _user.userEmail,\n            repoHostUrl: _repoHostUrl.repoHostUrl,\n            userNameSpace: _user.userNameSpace\n          });\n        }\n\n        if (/^ng/.test(_client)) {\n          ClientFactory.create(ClientFactory.tokens().ANGULAR, _client, this.wrapper).copyClient();\n        }\n\n        if (/^vue/.test(_client)) {\n          ClientFactory.create(ClientFactory.tokens().VUE, _client, this.wrapper).copyClient();\n        }\n\n        if (/^aurelia/.test(_client)) {\n          ClientFactory.create(ClientFactory.tokens().AURELIA, _client, this.wrapper).copyClient();\n        }\n      }\n\n      if (_copiesServer) {\n        ServerFactory.create(_server, this.wrapper).copyForMainGenerator();\n      }\n  }\n\n  install() {\n      this.wrapper.installDependencies({\n        skipInstall: this.wrapper.options['skip-install'],\n        npm: true,\n        bower: this.wrapper.client === AngularFactory.tokens().NG1\n      });\n  }\n\n  promptUser() {\n      const done = this.wrapper.async();\n\n      let prompts =[\n          {\n            name: 'appName',\n            message: 'What is the name of your app?',\n            default: 'ng-fullstack-app'\n          },\n          {\n            name: 'username',\n            message: 'What is your username?',\n            default: 'user.name'\n          },\n          {\n            name: 'userEmail',\n            message: 'What is your email (used in your package.json)?',\n            default: 'user.email@example.com'\n          },\n          {\n            type: \"list\",\n            name: \"stack\",\n            message: \"Which stack do you want?\",\n            choices: [\"fullstack\", \"client\", \"server\"],\n            default: 0\n          },\n          {\n            type: \"list\",\n            name: \"repoHost\",\n            message: \"Which Git repository hosting service are you using?\",\n            choices: [\"github\", \"bitbucket\", \"gitlab\"],\n            default: 0\n          },\n          {\n            name: 'repoHostUrl',\n            message: 'What is your GitLab URL/GitLab Server IP/GitLab Server FQDN?',\n            default: \"gitlab.com\",\n            when: (answersHash) => {\n              return answersHash.repoHost === \"gitlab\";\n            }\n          },\n          {\n            name: 'userNameSpace',\n            message: 'What is your GitLab NameSpace?',\n            default: \"namespace\",\n            when: (answersHash) => {\n              return answersHash.repoHost === \"gitlab\";\n            }\n          }\n        ];\n\n      this.wrapper.prompt(prompts, (props) => {\n        this.wrapper.appName = props.appName;\n        this.wrapper.username = props.username;\n        this.wrapper.userEmail = props.userEmail;\n        this.wrapper.stack = props.stack;\n\n        if (props.repoHost === \"github\") {\n          this.wrapper.repoHostUrl = \"github.com\";\n          this.wrapper.userNameSpace = props.username;\n        } else if (props.repoHost === \"bitbucket\") {\n          this.wrapper.repoHostUrl = \"bitbucket.org\";\n          this.wrapper.userNameSpace = props.username;\n        } else {\n          this.wrapper.repoHostUrl = props.repoHostUrl;\n          this.wrapper.userNameSpace = props.userNameSpace;\n        }\n\n        this.wrapper.config.set('appName', this.wrapper.appName);\n        this.wrapper.config.set('username', this.wrapper.username);\n        this.wrapper.config.set('userEmail', this.wrapper.userEmail);\n        this.wrapper.config.set('stack', this.wrapper.stack);\n        this.wrapper.config.set('repoHostUrl', this.wrapper.repoHostUrl);\n        this.wrapper.config.set('userNameSpace', this.wrapper.userNameSpace);\n\n        done();\n      });\n\n      this.wrapper.config.save();\n  }\n\n  promptTests() {\n    const done = this.wrapper.async();\n\n    let prompts = [\n      {\n        type: \"confirm\",\n        name: \"testsSeparated\",\n        message: \"Do you want to keep tests in a different folder?\",\n        default: true,\n        when: () => {\n          return !((this.wrapper.server === ServerFactory.tokens().GO) && (this.wrapper.stack === \"server\"));\n        }\n      }\n    ];\n\n    this.wrapper.prompt(prompts, (props) => {\n      this.wrapper.testsSeparated = props.testsSeparated;\n      this.wrapper.config.set('testsSeparated', this.wrapper.testsSeparated);\n\n      done();\n    });\n\n    this.wrapper.config.save();\n  }\n\n  promptServer() {\n    const done = this.wrapper.async();\n\n    let prompts = [\n      {\n        type: \"list\",\n        name: \"server\",\n        message: \"What language do you want in the server side?\",\n        choices: [\n          ServerFactory.tokens().NODE,\n          ServerFactory.tokens().GO\n        ],\n        when: () => {\n          let _isServer = this.wrapper.stack === \"server\";\n          let _isFullstack = this.wrapper.stack === \"fullstack\";\n\n          return _isServer || _isFullstack;\n        },\n        default: 0\n      }\n    ];\n\n    this.wrapper.prompt(prompts, (props) => {\n      this.wrapper.server = props.server;\n      this.wrapper.config.set('server', this.wrapper.server ? this.wrapper.server.toLowerCase() : '');\n\n      done();\n    });\n\n    this.wrapper.config.save();\n  }\n\n  promptClient() {\n    const done = this.wrapper.async();\n\n    let prompts = [\n      {\n        type: \"list\",\n        name: \"client\",\n        message: \"Which framework do you want to use in the client side?\",\n        choices: [\n          AngularFactory.tokens().NG1,\n          AngularFactory.tokens().NG2,\n          AureliaFactory.tokens().AURELIA1,\n          VueFactory.tokens().VUE2\n        ],\n        when: () => {\n          let _isClient = this.wrapper.stack === \"client\";\n          let _isFullstack = this.wrapper.stack === \"fullstack\";\n\n          return _isClient || _isFullstack;\n        },\n        default: 0\n      }\n    ];\n\n    this.wrapper.prompt(prompts, (props) => {\n      this.wrapper.client = props.client;\n      this.wrapper.config.set('client', this.wrapper.client ? this.wrapper.client.toLowerCase() : '');\n\n      done();\n    });\n\n    this.wrapper.config.save();\n  }\n\n  promptStylePreprocessor() {\n    const done = this.wrapper.async();\n\n    let prompts = [\n      {\n        type: \"list\",\n        name: \"stylePreprocessor\",\n        message: \"Which CSS pre-processor do you want to use?\",\n        choices: [\n          \"none\",\n          \"less\",\n          \"sass\"\n        ],\n        when: () => {\n          return this.wrapper.stack !== \"server\";\n        },\n        default: 0\n      }\n    ];\n\n    this.wrapper.prompt(prompts, (props) => {\n      this.wrapper.stylePreprocessor = props.stylePreprocessor;\n      this.wrapper.config.set('stylePreprocessor', this.wrapper.stylePreprocessor);\n\n      done();\n    });\n\n    this.wrapper.config.save();\n  }\n\n  promptNodeWebFrameworkServer() {\n    const done = this.wrapper.async();\n\n    let _prompts = [{\n      type: \"list\",\n      name: \"nodeWebFrameworkServer\",\n      message: \"Which framework do you want to use in server side?\",\n      choices: [\n        NodeFactory.tokensWebFramework().EXPRESS,\n        NodeFactory.tokensWebFramework().KOA\n      ],\n      default: 0,\n      when: () => {\n        return this.wrapper.server === ServerFactory.tokens().NODE;\n      }\n    }];\n\n    this.wrapper.prompt(_prompts, (props) => {\n      this.wrapper.nodeWebFrameworkServer = props.nodeWebFrameworkServer;\n      this.wrapper.config.set('nodeWebFrameworkServer', this.wrapper.nodeWebFrameworkServer);\n\n      done();\n    });\n\n    this.wrapper.config.save();\n  }\n\n  promptGoWebFrameworkServer() {\n    const done = this.wrapper.async();\n\n    let _prompts = [{\n      type: \"list\",\n      name: \"goWebFrameworkServer\",\n      message: \"Which framework do you want to use in server side?\",\n      choices: [\n        GoFactory.tokensWebFramework().ECHO,\n        GoFactory.tokensWebFramework().GIN\n      ],\n      default: 0,\n      when: () => {\n        return this.wrapper.server === ServerFactory.tokens().GO;\n      }\n    }];\n\n    this.wrapper.prompt(_prompts, (props) => {\n      this.wrapper.goWebFrameworkServer = props.goWebFrameworkServer;\n      this.wrapper.config.set('goWebFrameworkServer', this.wrapper.goWebFrameworkServer);\n\n      done();\n    });\n\n    this.wrapper.config.save();\n  }\n\n  promptTranspilerServer() {\n    const done = this.wrapper.async();\n\n    let _prompts = [{\n      type: \"list\",\n      name: \"transpilerServer\",\n      message: \"Which transpiler do you want to use in server side?\",\n      choices: [\n        NodeFactory.tokensCompiler().NODE,\n        NodeFactory.tokensCompiler().BABEL,\n        NodeFactory.tokensCompiler().TYPESCRIPT\n      ],\n      default: 0,\n      when: () => {\n        return this.wrapper.server === ServerFactory.tokens().NODE;\n      }\n    }];\n\n    this.wrapper.prompt(_prompts, (props) => {\n      this.wrapper.transpilerServer = props.transpilerServer;\n      this.wrapper.config.set('transpilerServer', this.wrapper.transpilerServer);\n\n      done();\n    });\n\n    this.wrapper.config.save();\n  }\n\n  promptSecure() {\n    const done = this.wrapper.async();\n\n    let _prompts = [{\n      type: 'confirm',\n      name: 'secure',\n      message: 'Is it going to be a secure app (HTTP/2)?',\n      default: true\n    }];\n\n    this.wrapper.prompt(_prompts, (props) => {\n      this.wrapper.secure = props.secure;\n      this.wrapper.config.set('secure', this.wrapper.secure);\n\n      done();\n    });\n  }\n\n  promptDifferentStaticServer() {\n    const done = this.wrapper.async();\n\n    let _prompts = [{\n      type: 'confirm',\n      name: 'differentStaticServer',\n      message: 'Do you want to use a different static server? Such as NGINX, Apache, IIS, etc?',\n      default: false,\n      when: () => {\n        return this.wrapper.stack === \"fullstack\";\n      }\n    }];\n\n    this.wrapper.prompt(_prompts, (props) => {\n      this.wrapper.differentStaticServer = props.differentStaticServer;\n      this.wrapper.config.set('differentStaticServer', this.wrapper.differentStaticServer);\n\n      done();\n    });\n  }\n\n  promptCordova() {\n    const done = this.wrapper.async();\n\n    let _prompts = [{\n      type: 'confirm',\n      name: 'cordova',\n      message: 'Are you using Cordova?',\n      default: false,\n      when: () => {\n        return (this.wrapper.stack === \"client\") && (this.wrapper.client === \"ng1\");\n      }\n    }];\n\n    this.wrapper.prompt(_prompts, (props) => {\n      this.wrapper.cordova = props.cordova;\n      this.wrapper.config.set('cordova', this.wrapper.cordova);\n\n      done();\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/node_factory.js":"\"use strict\";\n\nconst {NodeExpressStandard} = require('./node_express');\nconst {NodeExpressBabel} = require('./node_express');\nconst {NodeExpressTypescript} = require('./node_express');\n\nconst {NodeKoaStandard} = require('./node_koa');\nconst {NodeKoaBabel} = require('./node_koa');\nconst {NodeKoaTypescript} = require('./node_koa');\n\nexports.NodeFactory = class NodeFactory {\n  static tokensCompiler() {\n    return {\n      NODE: \"node\",\n      BABEL: \"babel\",\n      TYPESCRIPT: \"typescript\"\n    };\n  }\n\n  static tokensWebFramework() {\n    return {\n      EXPRESS: \"express\",\n      KOA: \"koa\"\n    };\n  }\n\n  static build(generator) {\n    let _isKoa = generator.nodeWebFrameworkServer === NodeFactory.tokensWebFramework().KOA;\n    let _isExpress = generator.nodeWebFrameworkServer === NodeFactory.tokensWebFramework().EXPRESS;\n    let _isNotInformed = generator.nodeWebFrameworkServer == undefined;\n\n    if (_isKoa) {\n      switch(generator.transpilerServer) {\n        case NodeFactory.tokensCompiler().NODE: return new NodeKoaStandard(generator);\n        case NodeFactory.tokensCompiler().BABEL: return new NodeKoaBabel(generator);\n        case NodeFactory.tokensCompiler().TYPESCRIPT: return new NodeKoaTypescript(generator);\n      }\n    }\n\n    if (_isExpress || _isNotInformed) {\n      switch(generator.transpilerServer) {\n        case NodeFactory.tokensCompiler().NODE: return new NodeExpressStandard(generator);\n        case NodeFactory.tokensCompiler().BABEL: return new NodeExpressBabel(generator);\n        case NodeFactory.tokensCompiler().TYPESCRIPT: return new NodeExpressTypescript(generator);\n      }\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/node_express.js":"\"use strict\";\n\nconst {NodeBaseStandard} = require('./node_base');\nconst {NodeBaseBabel} = require('./node_base');\nconst {NodeBaseTypescript} = require('./node_base');\n\nconst SERVER_TOKEN = 'express';\n\nclass NodeExpressStandard extends NodeBaseStandard {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n}\n\nclass NodeExpressBabel extends NodeBaseBabel {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n}\n\nclass NodeExpressTypescript extends NodeBaseTypescript {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n}\n\nexports.NodeExpressBabel = NodeExpressBabel;\nexports.NodeExpressTypescript = NodeExpressTypescript;\nexports.NodeExpressStandard = NodeExpressStandard;\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/node_base.js":"\"use strict\";\n\nconst knownPaths = require('../utils/known_paths');\nconst yoUtils = require('../utils/yeoman-utils');\n\nconst basePath = (generator) => {\n  return {\n    route: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/route/${generator.name}-route`,\n    routeTestTogether: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/route/${generator.name}-route_test`,\n    routeTestSeparate: `${knownPaths.PATH_SERVER_FEATURES_TEST + generator.feature}/route/${generator.name}-route_test`,\n\n    controller: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/controller/${generator.name}-controller`,\n    controllerTestTogether: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/controller/${generator.name}-controller_test`,\n    controllerTestSeparate: `${knownPaths.PATH_SERVER_FEATURES_TEST + generator.feature}/controller/${generator.name}-controller_test`,\n\n    dao: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/dao/${generator.name}-dao`,\n    daoTestTogether: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/dao/${generator.name}-dao_test`,\n    daoTestSeparate: `${knownPaths.PATH_SERVER_FEATURES_TEST + generator.feature}/dao/${generator.name}-dao_test`,\n\n    model: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/model/${generator.name}-model`,\n    modelTestTogether: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/model/${generator.name}-model_test`,\n    modelTestSeparate: `${knownPaths.PATH_SERVER_FEATURES_TEST + generator.feature}/model/${generator.name}-model_test`\n  };\n};\n\nclass NodeBaseStandard {\n  constructor(generator, webFramework) {\n    this.wrapper = generator;\n    this.webFramework = webFramework;\n  }\n\n  copyFiles() {\n    let gen = basePath(this.wrapper);\n    const testsSeparated = this.wrapper.testsSeparated !== undefined ? this.wrapper.testsSeparated : true;\n    const TESTS = testsSeparated ? 'Separate' : 'Together';\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.route.js', `${gen.route}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.controller.js', `${gen.controller}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.dao.js', `${gen.dao}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.model.js', `${gen.model}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.route_test.js', `${gen[`routeTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.controller_test.js', `${gen[`controllerTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.dao_test.js', `${gen[`daoTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/no_transpiler/endpoint.model_test.js', `${gen[`modelTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n  }\n\n  copyForMainGenerator() {\n    this.wrapper.differentStaticServer = !!this.wrapper.differentStaticServer || (this.wrapper.stack === \"server\");\n\n    this.wrapper.template('index_node.js', 'server/index.js');\n    this.wrapper.directory('tasks/server', 'tasks/server');\n\n    if(this.wrapper.testsSeparated) {\n      this.wrapper.directory('tests/server', 'tests/server');\n    }\n\n    if (this.wrapper.secure) {\n      this.wrapper.template('server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/server_http2.js', 'server/server.js', {\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n    else {\n      this.wrapper.template('server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/server.js', 'server/server.js', {\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n\n    let _paths = [\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/routes/index.js', 'server/routes/index.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/constants/db.json', 'server/constants/db.json'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/config/db.conf.js', 'server/config/db.conf.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/config/routes.conf.js', 'server/config/routes.conf.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/auth/local/index.js', 'server/auth/local/index.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/controller/todo-controller.js', 'server/api/todo/controller/todo-controller.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/dao/todo-dao.js', 'server/api/todo/dao/todo-dao.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/model/todo-model.js', 'server/api/todo/model/todo-model.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/route/todo-route.js', 'server/api/todo/route/todo-route.js']\n    ];\n\n    if (!this.wrapper.differentStaticServer) {\n      _paths.push(['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/commons/static/index.js', 'server/commons/static/index.js']);\n    }\n\n    yoUtils.directory(this.wrapper, _paths, {\n      appName: this.wrapper.appName,\n      testsSeparated: this.wrapper.testsSeparated,\n      differentStaticServer: !!this.wrapper.differentStaticServer\n    });\n\n    if (!this.wrapper.testsSeparated) {\n      let _tests = [\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/config/db.conf.test.js', 'server/config/db.conf.test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/config/db.test.json', 'server/config/db.test.json'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/controller/todo-controller_test.js', 'server/api/todo/controller/todo-controller_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/dao/todo-dao_test.js', 'server/api/todo/dao/todo-dao_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/model/todo-model_test.js', 'server/api/todo/model/todo-model_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '/api/todo/route/todo-route_test.js', 'server/api/todo/route/todo-route_test.js']\n      ];\n\n      yoUtils.directory(this.wrapper, _tests, {\n        appName: this.wrapper.appName,\n        testsSeparated: this.wrapper.testsSeparated,\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n\n  }\n}\n\nclass NodeBaseBabel {\n  constructor(generator, webFramework) {\n    this.wrapper = generator;\n    this.webFramework = webFramework;\n  }\n\n  copyFiles() {\n    let gen = basePath(this.wrapper);\n    const testsSeparated = this.wrapper.testsSeparated !== undefined ? this.wrapper.testsSeparated : true;\n    const TESTS = testsSeparated ? 'Separate' : 'Together';\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.route.js', `${gen.route}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.controller.js', `${gen.controller}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.dao.js', `${gen.dao}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.model.js', `${gen.model}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.route_test.js', `${gen[`routeTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.controller_test.js', `${gen[`controllerTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.dao_test.js', `${gen[`daoTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/babel/endpoint.model_test.js', `${gen[`modelTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n  }\n\n  copyForMainGenerator() {\n    this.wrapper.differentStaticServer = !!this.wrapper.differentStaticServer || (this.wrapper.stack === \"server\");\n\n    this.wrapper.template('index_babel.js', 'server/index.js');\n    this.wrapper.directory('tasks/server', 'tasks/server');\n\n    if(this.wrapper.testsSeparated) {\n      this.wrapper.directory('tests/server', 'tests/server');\n    }\n\n    if (this.wrapper.secure) {\n      this.wrapper.template('server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/server_http2.js', 'server/server.js', {\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n    else {\n      this.wrapper.template('server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/server.js', 'server/server.js', {\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n\n    let _paths = [\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/routes/index.js', 'server/routes/index.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/constants/db.json', 'server/constants/db.json'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/config/db.conf.js', 'server/config/db.conf.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/config/routes.conf.js', 'server/config/routes.conf.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/auth/local/index.js', 'server/auth/local/index.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/controller/todo-controller.js', 'server/api/todo/controller/todo-controller.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/dao/todo-dao.js', 'server/api/todo/dao/todo-dao.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/model/todo-model.js', 'server/api/todo/model/todo-model.js'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/route/todo-route.js', 'server/api/todo/route/todo-route.js']\n    ];\n\n    if (!this.wrapper.differentStaticServer) {\n      _paths.push(['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/commons/static/index.js', 'server/commons/static/index.js']);\n    }\n\n    yoUtils.directory(this.wrapper, _paths, {\n      appName: this.wrapper.appName,\n      testsSeparated: this.wrapper.testsSeparated,\n      differentStaticServer: !!this.wrapper.differentStaticServer\n    });\n\n    if (!this.wrapper.testsSeparated) {\n      let _tests = [\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/config/db.conf.test.js', 'server/config/db.conf.test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/config/db.test.json', 'server/config/db.test.json'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/controller/todo-controller_test.js', 'server/api/todo/controller/todo-controller_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/dao/todo-dao_test.js', 'server/api/todo/dao/todo-dao_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/model/todo-model_test.js', 'server/api/todo/model/todo-model_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_babel/api/todo/route/todo-route_test.js', 'server/api/todo/route/todo-route_test.js']\n      ];\n\n      yoUtils.directory(this.wrapper, _tests, {\n        appName: this.wrapper.appName,\n        testsSeparated: this.wrapper.testsSeparated,\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n  }\n}\n\nclass NodeBaseTypescript {\n  constructor(generator, webFramework) {\n    this.wrapper = generator;\n    this.webFramework = webFramework;\n  }\n\n  copyFiles() {\n    let gen = basePath(this.wrapper);\n    const testsSeparated = this.wrapper.testsSeparated !== undefined ? this.wrapper.testsSeparated : true;\n    const TESTS = testsSeparated ? 'Separate' : 'Together';\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.route.ts', `${gen.route}.ts`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.controller.ts', `${gen.controller}.ts`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.dao.ts', `${gen.dao}.ts`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.model.ts', `${gen.model}.ts`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase()\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.route_test.js', `${gen[`routeTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.controller_test.js', `${gen[`controllerTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.dao_test.js', `${gen[`daoTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n\n    this.wrapper.template('node/' + this.webFramework + '/typescript/endpoint.model_test.js', `${gen[`modelTest${TESTS}`]}.js`, {\n      feature: this.wrapper.feature,\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      testsSeparated: this.wrapper.testsSeparated\n    });\n  }\n\n  copyForMainGenerator() {\n    this.wrapper.differentStaticServer = !!this.wrapper.differentStaticServer || (this.wrapper.stack === \"server\");\n\n    this.wrapper.template('index_tsc.js', 'server/index.js');\n    this.wrapper.template('_tsconfig.json', 'tsconfig.json');\n    this.wrapper.template('_typings_ng2_and_tsc_server.json', 'typings.json');\n    this.wrapper.directory('tasks/server', 'tasks/server');\n\n    if (this.wrapper.testsSeparated) {\n      this.wrapper.directory('tests/server', 'tests/server');\n    }\n\n    if (this.wrapper.secure) {\n      this.wrapper.template('server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/server_http2.ts', 'server/server.ts', {\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n    else {\n      this.wrapper.template('server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/server.ts', 'server/server.ts', {\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n\n    let _paths = [\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/routes/index.ts', 'server/routes/index.ts'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/constants/db.json', 'server/constants/db.json'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/config/db.conf.ts', 'server/config/db.conf.ts'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/config/routes.conf.ts', 'server/config/routes.conf.ts'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/auth/local/index.ts', 'server/auth/local/index.ts'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/controller/todo-controller.ts', 'server/api/todo/controller/todo-controller.ts'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/dao/todo-dao.ts', 'server/api/todo/dao/todo-dao.ts'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/model/todo-model.ts', 'server/api/todo/model/todo-model.ts'],\n      ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/route/todo-route.ts', 'server/api/todo/route/todo-route.ts']\n    ];\n\n    if (!this.wrapper.differentStaticServer) {\n      _paths.push(['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/commons/static/index.ts', 'server/commons/static/index.ts']);\n    }\n\n    yoUtils.directory(this.wrapper, _paths, {\n      appName: this.wrapper.appName,\n      testsSeparated: this.wrapper.testsSeparated,\n      differentStaticServer: !!this.wrapper.differentStaticServer\n    });\n\n    if (!this.wrapper.testsSeparated) {\n      let _tests = [\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/config/db.conf.test.js', 'server/config/db.conf.test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/config/db.test.json', 'server/config/db.test.json'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/controller/todo-controller_test.js', 'server/api/todo/controller/todo-controller_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/dao/todo-dao_test.js', 'server/api/todo/dao/todo-dao_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/model/todo-model_test.js', 'server/api/todo/model/todo-model_test.js'],\n        ['server/node/' + this.webFramework + '/server_node_' + this.webFramework + '_typescript/api/todo/route/todo-route_test.js', 'server/api/todo/route/todo-route_test.js']\n      ];\n\n      yoUtils.directory(this.wrapper, _tests, {\n        appName: this.wrapper.appName,\n        testsSeparated: this.wrapper.testsSeparated,\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n  }\n}\n\nexports.NodeBaseBabel = NodeBaseBabel;\nexports.NodeBaseTypescript = NodeBaseTypescript;\nexports.NodeBaseStandard = NodeBaseStandard;\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/utils/known_paths.js":"exports.PATH_CLIENT_FEATURES = 'client/dev/';\nexports.PATH_SERVER_FEATURES = 'server/api/';\n\nexports.PATH_CLIENT_FEATURES_TEST = 'tests/client/';\nexports.PATH_SERVER_FEATURES_TEST = 'tests/server/';\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/utils/yeoman-utils.js":"'use strict';\n\nexports.directory = function(gen, paths, opts) {\n  // paths has to be the certain way:\n  // [\n  //     ['path1', 'path2']\n  //     ['path3', 'path4']\n  //     ['path5', 'path6']\n  //     ['path7', 'path8']\n  //]\n\n  if (!gen) {\n    throw new TypeError('Generator is not defined.');\n  }\n\n  if (!gen.template || (typeof gen.template !== 'function')) {\n    throw new TypeError('Template is not a valid method of the generator.');\n  }\n\n  paths.forEach((p) => {\n    gen.template(p[0], p[1], opts);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/node_koa.js":"\"use strict\";\n\nconst {NodeBaseStandard} = require('./node_base');\nconst {NodeBaseBabel} = require('./node_base');\nconst {NodeBaseTypescript} = require('./node_base');\n\nconst SERVER_TOKEN = 'koa';\n\nclass NodeKoaStandard extends NodeBaseStandard {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n}\n\nclass NodeKoaBabel extends NodeBaseBabel {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n}\n\nclass NodeKoaTypescript extends NodeBaseTypescript {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n}\n\nexports.NodeKoaBabel = NodeKoaBabel;\nexports.NodeKoaTypescript = NodeKoaTypescript;\nexports.NodeKoaStandard = NodeKoaStandard;\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/go_factory.js":"\"use strict\";\n\nconst {GoEcho} = require('./go_echo');\nconst {GoGin} = require('./go_gin');\n\nexports.GoFactory = class GoFactory {\n  static tokensWebFramework() {\n    return {\n      ECHO: 'echo',\n      GIN: 'gin'\n    };\n  }\n\n  static build(generator) {\n    switch(generator.goWebFrameworkServer) {\n      case GoFactory.tokensWebFramework().ECHO: return new GoEcho(generator);\n      case GoFactory.tokensWebFramework().GIN: return new GoGin(generator);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/go_echo.js":"\"use strict\";\n\nconst {GoBase} = require('./go_base');\n\nconst SERVER_TOKEN = 'echo';\n\nexports.GoEcho = class GoEcho extends GoBase {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/go_base.js":"\"use strict\";\n\nconst knownPaths = require('../utils/known_paths');\nconst yoUtils = require('../utils/yeoman-utils');\n\nconst basePath = (generator) => {\n  return {\n    route: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/route/${generator.name}route`,\n    controller: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/controller/${generator.name}controller`,\n    dao: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/dao/${generator.name}dao`,\n    model: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/model/${generator.name}model`,\n    daoTest: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/dao/${generator.name}dao_test`,\n    modelTest: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/model/${generator.name}model_test`,\n    controllerTest: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/controller/${generator.name}controller_test`,\n    routeTest: `${knownPaths.PATH_SERVER_FEATURES + generator.feature}/route/${generator.name}route_test`\n  };\n};\n\nexports.GoBase = class GoBase {\n  constructor(generator, webFramework) {\n    this.wrapper = generator;\n    this.webFramework = webFramework;\n  }\n\n  copyFiles() {\n    let _featureWithoutTrailingSlash = this.wrapper.feature.replace('/', '');\n    let gen = basePath(this.wrapper);\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.route.go', `${gen.route}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.controller.go', `${gen.controller}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.dao.go', `${gen.dao}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.model.go', `${gen.model}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.dao_test.go', `${gen.daoTest}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.model_test.go', `${gen.modelTest}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.controller_test.go', `${gen.controllerTest}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n\n    this.wrapper.template('go/'+this.webFramework+'/endpoint.route_test.go', `${gen.routeTest}.go`, {\n      name: this.wrapper.name,\n      nameLowerCase: this.wrapper.name.toLowerCase(),\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      appName: this.wrapper.appName,\n      feature: _featureWithoutTrailingSlash\n    });\n  }\n\n  copyForMainGenerator() {\n    this.wrapper.differentStaticServer = !!this.wrapper.differentStaticServer || (this.wrapper.stack === \"server\");\n\n    if (this.wrapper.secure) {\n      this.wrapper.template('server/go/'+this.webFramework+'/main_http2.go', 'server/main.go', {\n        appName: this.wrapper.appName,\n        userNameSpace: this.wrapper.userNameSpace,\n        repoHostUrl: this.wrapper.repoHostUrl,\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n    else {\n      this.wrapper.template('server/go/'+this.webFramework+'/main.go', 'server/main.go', {\n        appName: this.wrapper.appName,\n        userNameSpace: this.wrapper.userNameSpace,\n        repoHostUrl: this.wrapper.repoHostUrl,\n        differentStaticServer: !!this.wrapper.differentStaticServer\n      });\n    }\n\n    let _paths = [\n      ['server/go/'+this.webFramework+'/routes/routes.go', 'server/routes/routes.go'],\n      ['server/go/'+this.webFramework+'/routes/routes_test.go', 'server/routes/routes_test.go'],\n\n      ['server/go/'+this.webFramework+'/config/dbconfig.go', 'server/config/dbconfig.go'],\n      ['server/go/'+this.webFramework+'/config/dbconfig_test.go', 'server/config/dbconfig_test.go'],\n\n      ['server/go/'+this.webFramework+'/api/todo/route/todoroute.go', 'server/api/todo/route/todoroute.go'],\n      ['server/go/'+this.webFramework+'/api/todo/route/todoroute_test.go', 'server/api/todo/route/todoroute_test.go'],\n\n      ['server/go/'+this.webFramework+'/api/todo/model/todomodel.go', 'server/api/todo/model/todomodel.go'],\n      ['server/go/'+this.webFramework+'/api/todo/model/todomodel_test.go', 'server/api/todo/model/todomodel_test.go'],\n\n      ['server/go/'+this.webFramework+'/api/todo/dao/tododao.go', 'server/api/todo/dao/tododao.go'],\n      ['server/go/'+this.webFramework+'/api/todo/dao/tododao_test.go', 'server/api/todo/dao/tododao_test.go'],\n\n      ['server/go/'+this.webFramework+'/api/todo/controller/todocontroller.go', 'server/api/todo/controller/todocontroller.go'],\n      ['server/go/'+this.webFramework+'/api/todo/controller/todocontroller_test.go', 'server/api/todo/controller/todocontroller_test.go'],\n    ];\n\n    if (!this.wrapper.differentStaticServer) {\n      _paths.push(['server/go/'+this.webFramework+'/common/static/static.go', 'server/common/static/static.go'],\n                  ['server/go/'+this.webFramework+'/common/static/static_test.go', 'server/common/static/static_test.go']);\n    }\n\n    yoUtils.directory(this.wrapper, _paths, {\n      appName: this.wrapper.appName,\n      userNameSpace: this.wrapper.userNameSpace,\n      repoHostUrl: this.wrapper.repoHostUrl,\n      differentStaticServer: !!this.wrapper.differentStaticServer\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/go_gin.js":"\"use strict\";\n\nconst {GoBase} = require('./go_base');\n\nconst SERVER_TOKEN = 'gin';\n\nexports.GoGin = class GoGin extends GoBase {\n  constructor(generator) {\n    super(generator, SERVER_TOKEN);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/angular.js":"'use strict';\n\nconst utils = require('../utils/utils');\nconst knownPaths = require('../utils/known_paths');\nconst yoUtils = require('../utils/yeoman-utils');\nconst {\n  copyStyleForSubGenerator,\n  copyStyleForMainGenerator,\n  normalizeStylePreprocessor\n} = require('./style');\n\nclass Angular1 {\n  constructor(gen) {\n    this.generator = gen;\n    this.testsSeparated = gen && gen.testsSeparated !== undefined && typeof(gen.testsSeparated) === \"boolean\" ? gen.testsSeparated : true;\n    this.testsPath = this.testsSeparated ? knownPaths.PATH_CLIENT_FEATURES_TEST : knownPaths.PATH_CLIENT_FEATURES;\n  }\n\n  copyClient() {\n    let _pathSrc = [\n      ['client/ng1/dev/index.html', 'client/dev/index.html'],\n      ['client/ng1/dev/favicon.png', 'client/dev/favicon.png'],\n      ['client/ng1/dev/app.js', 'client/dev/app.js'],\n      ['client/ng1/dev/app.route.js', 'client/dev/app.route.js'],\n      ['client/ng1/dev/app.config.js', 'client/dev/app.config.js'],\n      ['client/ng1/dev/todo/controllers/todo-controller.js', 'client/dev/todo/controllers/todo-controller.js'],\n      ['client/ng1/dev/todo/models/todo-model.js', 'client/dev/todo/models/todo-model.js'],\n      ['client/ng1/dev/todo/services/todo-dao.js', 'client/dev/todo/services/todo-dao.js'],\n      ['client/ng1/dev/todo/resources/todo-resource.js', 'client/dev/todo/resources/todo-resource.js'],\n      ['client/ng1/dev/todo/templates/todo.html', 'client/dev/todo/templates/todo.html']\n    ];\n\n    let _pathTest = [];\n\n    if(this.testsSeparated) {\n      _pathTest = [\n        ['tests/client_ng1/todo/controllers/todo-controller_test.js', 'tests/client/todo/controllers/todo-controller_test.js'],\n        ['tests/client_ng1/todo/models/todo-model_test.js', 'tests/client/todo/models/todo-model_test.js'],\n        ['tests/client_ng1/todo/services/todo-dao_test.js', 'tests/client/todo/services/todo-dao_test.js']\n      ];\n    } else {\n      _pathTest = [\n        ['tests/client_ng1/todo/controllers/todo-controller_test.js', 'client/dev/todo/controllers/todo-controller_test.js'],\n        ['tests/client_ng1/todo/models/todo-model_test.js', 'client/dev/todo/models/todo-model_test.js'],\n        ['tests/client_ng1/todo/services/todo-dao_test.js', 'client/dev/todo/services/todo-dao_test.js']\n      ];\n    }\n\n    this.generator.directory('tasks/client/ng1', 'tasks/client');\n\n    this.generator.template('tasks/client/ng1/const.js', 'tasks/client/const.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    this.generator.template('tasks/client/ng1/build_css.js', 'tasks/client/build_css.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    this.generator.template('tasks/client/ng1/watch.js', 'tasks/client/watch.js', {\n      secure: !!this.generator.secure,\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    yoUtils.directory(this.generator, _pathSrc, this.generator);\n    yoUtils.directory(this.generator, _pathTest, this.generator);\n\n    copyStyleForMainGenerator(this.generator, 'client/dev/todo/styles/todo');\n  }\n\n  copyComponent(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/component.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/components/${this.generator.name}.js`, {\n        nameCapitalized: utils.capitalizeFirst(this.generator.name),\n        name: this.generator.name,\n        feature: this.generator.options.feature,\n        appName: this.generator.appName\n    });\n\n    this.generator.template(_pathTemplate + 'ng1/component.html',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/templates/${this.generator.name}.html`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'ng1/component.css',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/styles/${this.generator.name}.css`\n    );\n\n    this.generator.template(_pathTemplate + 'ng1/component_test.js',\n      `${this.testsPath + this.generator.options.feature}/components/${this.generator.name}_test.js`, {\n        name: this.generator.name,\n        nameLowerCase: this.generator.name.toLowerCase(),\n        appName: this.generator.appName\n    });\n  }\n\n  copyController(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/controller_client.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/controllers/${this.generator.name}.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n\n    this.generator.template(_pathTemplate + 'ng1/controller_client_test.js',\n      `${this.testsPath + this.generator.options.feature}/controllers/${this.generator.name}_test.js`, {\n        name: this.generator.name,\n        nameLowerCase: this.generator.name.toLowerCase(),\n        appName: this.generator.appName\n    });\n  }\n\n  copyDirective(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/directive.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/directives/${this.generator.name}.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n\n    this.generator.template('ng1/directive_test.js',\n      `${this.testsPath + this.generator.options.feature}/directives/${this.generator.name}_test.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName,\n        testsSeparated: this.generator.testsSeparated\n    });\n  }\n\n  copyFactory(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/factory.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/factory/${this.generator.name}.js`, {\n        name: utils.capitalizeFirst(this.generator.name),\n        appName: this.generator.appName\n    });\n\n    this.generator.template(_pathTemplate + 'ng1/factory_test.js',\n      `${this.testsPath + this.generator.options.feature}/factory/${this.generator.name}_test.js`, {\n        name: utils.capitalizeFirst(this.generator.name),\n        appName: this.generator.appName\n    });\n  }\n\n  copyService(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/service.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/services/${this.generator.name}.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n\n    this.generator.template(_pathTemplate + 'ng1/service_test.js',\n      `${this.testsPath + this.generator.options.feature}/services/${this.generator.name}_test.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n  }\n\n  copyModel(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/model.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/models/${this.generator.name}.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n\n    this.generator.template(_pathTemplate + 'ng1/model_test.js',\n      `${this.testsPath + this.generator.options.feature}/models/${this.generator.name}_test.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n  }\n\n  copyDecorator(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/decorator.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/decorator/${this.generator.name}.js`, {\n        appName: this.generator.appName\n    });\n  }\n\n  copyFilter(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/filter.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/filters/${this.generator.name}.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n\n    this.generator.template(_pathTemplate + 'ng1/filter_test.js',\n      `${this.testsPath + this.generator.options.feature}/filters/${this.generator.name}_test.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n  }\n\n  copyTemplate(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'view.html',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/templates/${this.generator.name}.html`, {\n        name: this.generator.name\n    });\n  }\n\n  copyStyle(pathTemplate) {\n    copyStyleForSubGenerator(this.generator, pathTemplate);\n  }\n\n  copyResource(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng1/resource.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/resources/${this.generator.name}.js`, {\n        name: this.generator.name,\n        appName: this.generator.appName\n    });\n  }\n\n  copyModule() {\n      this.copyController('../../controller/templates/');\n      this.copyFactory('../../factory/templates/');\n      this.copyResource('../../resource/templates/');\n      this.copyService('../../service/templates/');\n      this.copyModel('../../model/templates/');\n      this.copyStyle('../../style/templates/');\n      this.copyTemplate('../../view/templates/');\n  }\n}\n\nclass Angular2 {\n  constructor(gen) {\n    this.generator = gen;\n    this.testsSeparated = gen && gen.testsSeparated !== undefined && typeof(gen.testsSeparated) === \"boolean\" ? gen.testsSeparated : true;\n    this.testsPath = this.testsSeparated ? knownPaths.PATH_CLIENT_FEATURES_TEST : knownPaths.PATH_CLIENT_FEATURES;\n  }\n\n  copyClient() {\n    this.generator.directory('tasks/client/ng2', 'tasks/client');\n    this.generator.directory('client/ng2', 'client');\n    this.generator.template('_karma.conf_ng2.js', 'karma.conf.js', {testsSeparated: this.testsSeparated});\n    this.generator.template('_karma-test-shim.js', 'karma-test-shim.js');\n    this.generator.template('_typings_ng2.json', 'typings.json');\n    this.generator.template('_tsconfig.json', 'tsconfig.json');\n\n    if(this.testsSeparated) {\n      this.generator.directory('tests/client_ng2', 'tests/client');\n    } else {\n      let _pathTest = [\n        ['tests/client_ng2/todo/components/todo-cmp_test.ts', 'client/dev/todo/components/todo-cmp_test.ts'],\n        ['tests/client_ng2/todo/services/todo-service_test.ts', 'client/dev/todo/services/todo-service_test.ts']\n      ];\n      yoUtils.directory(this.generator, _pathTest, this.generator);\n    }\n\n    if (this.generator.stack === \"client\")  {\n      this.generator.template('_ng2_systemjs_config_serving_from_root.js', 'client/dev/config.js');\n    } else {\n      this.generator.template('_ng2_systemjs_config_serving_node_modules.js', 'client/dev/config.js');\n    }\n\n    this.generator.template('tasks/client/ng2/const.js', 'tasks/client/const.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    this.generator.template('tasks/client/ng2/build_css.js', 'tasks/client/build_css.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    this.generator.template('tasks/client/ng2/watch.js', 'tasks/client/watch.js', {\n      secure: !!this.generator.secure,\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    copyStyleForMainGenerator(this.generator, 'client/dev/todo/styles/todo');\n  }\n\n  copyComponent(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng2/component.ts',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/components/${this.generator.name}.ts`, {\n        nameCapitalized: utils.capitalizeFirst(this.generator.name),\n        name: this.generator.name,\n        feature: this.generator.options.feature\n    });\n\n    this.generator.template(_pathTemplate + 'ng2/component.html',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/templates/${this.generator.name}.html`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'ng2/component.css',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/styles/${this.generator.name}.css`\n    );\n\n    this.generator.template(_pathTemplate + 'ng2/component_test.ts',\n      `${this.testsPath + this.generator.options.feature}/components/${this.generator.name}_test.ts`, {\n        name: utils.capitalizeFirst(this.generator.name),\n        nameLowerCase: this.generator.name.toLowerCase()\n    });\n  }\n\n  copyDirective(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng2/directive.ts',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/directives/${this.generator.name}.ts`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'ng2/directive_test.ts',\n      `${this.testsPath + this.generator.options.feature}/directives/${this.generator.name}_test.ts`, {\n        name: this.generator.name\n    });\n  }\n\n\n  copyFactory(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng2/factory.ts',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/factory/${this.generator.name}.ts`, {\n        name: utils.capitalizeFirst(this.generator.name)\n    });\n\n    this.generator.template(_pathTemplate + 'ng2/factory_test.ts',\n      `${this.testsPath + this.generator.options.feature}/factory/${this.generator.name}_test.ts`, {\n        name: utils.capitalizeFirst(this.generator.name)\n    });\n  }\n\n  copyService(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng2/service.ts',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/services/${this.generator.name}.ts`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'ng2/service_test.ts',\n      `${this.testsPath + this.generator.options.feature}/services/${this.generator.name}_test.ts`, {\n        name: this.generator.name\n    });\n  }\n\n  copyModel(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng2/model.ts',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/models/${this.generator.name}.ts`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'ng2/model_test.ts',\n      `${this.testsPath + this.generator.options.feature}/models/${this.generator.name}_test.ts`, {\n        name: this.generator.name\n    });\n  }\n\n  copyPipe(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'ng2/pipe.ts',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/pipes/${this.generator.name}.ts`, {\n        name: this.generator.name,\n        nameCapitalized: utils.capitalizeFirst(this.generator.name)\n    });\n\n    this.generator.template(_pathTemplate + 'ng2/pipe_test.js',\n      `${this.testsPath + this.generator.options.feature}/pipes/${this.generator.name}_test.js`, {\n        name: this.generator.name,\n        nameCapitalized: utils.capitalizeFirst(this.generator.name)\n    });\n  }\n\n  copyTemplate(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'view.html',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/templates/${this.generator.name}.html`, {\n        name: this.generator.name\n    });\n  }\n\n  copyStyle(pathTemplate) {\n    copyStyleForSubGenerator(this.generator, pathTemplate);\n  }\n\n  copyModule() {\n      this.copyComponent('../../component/templates/');\n      this.copyFactory('../../factory/templates/');\n      this.copyService('../../service/templates/');\n      this.copyModel('../../model/templates/');\n      this.copyStyle('../../style/templates/');\n      this.copyTemplate('../../view/templates/');\n  }\n}\n\nclass AngularFactory {\n  static tokens() {\n    return {\n      NG1: 'ng1',\n      NG2: 'ng2'\n    };\n  }\n\n  static build(token, gen) {\n    switch(token) {\n      case AngularFactory.tokens().NG1: return new Angular1(gen);\n      case AngularFactory.tokens().NG2: return new Angular2(gen);\n      default: throw new Error(`Invalid Angular token: ${token}.`);\n    }\n  }\n}\n\nexports.Angular1 = Angular1;\nexports.Angular2 = Angular2;\nexports.AngularFactory = AngularFactory;\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/utils/utils.js":"'use strict';\n\nexports.capitalizeFirst = (str) => {\n  if (!str) {\n    return '';\n  }\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/style.js":"const knownPaths = require('../utils/known_paths');\n\nfunction _getExt(gen) {\n  let _ext = '';\n\n  switch(gen.stylePreprocessor) {\n    case \"less\":\n      _ext = \".less\";\n      break;\n\n    case \"sass\":\n      _ext = \".scss\";\n      break;\n\n    default:\n      _ext = \".css\";\n  }\n\n  return _ext;\n}\n\nexports.copyStyleForMainGenerator = function(gen, dest) {\n  let _ext = _getExt(gen);\n\n  gen.template('client/_styles/todo' + _ext, dest + _ext);\n};\n\nexports.copyStyleForSubGenerator = function(gen, path) {\n  let _pathTemplate = path || '';\n  let _ext = _getExt(gen);\n\n  gen.template(`${_pathTemplate}style${_ext}`,\n               `${knownPaths.PATH_CLIENT_FEATURES + gen.options.feature}/styles/${gen.name}${_ext}`\n  );\n};\n\nexports.normalizeStylePreprocessor = function(stylePreprocessor) {\n  return (!!stylePreprocessor && stylePreprocessor !== \"none\") ? stylePreprocessor : undefined;\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/aurelia.js":"'use strict';\n\nconst utils = require('../utils/utils');\nconst knownPaths = require('../utils/known_paths');\nconst yoUtils = require('../utils/yeoman-utils');\nconst {\n  copyStyleForSubGenerator,\n  copyStyleForMainGenerator,\n  normalizeStylePreprocessor\n} = require('./style');\n\nclass Aurelia1 {\n  constructor(gen) {\n    this.generator = gen;\n    this.testsSeparated = gen && gen.testsSeparated !== undefined && typeof(gen.testsSeparated) === \"boolean\" ? gen.testsSeparated : true;\n    this.testsPath = this.testsSeparated ? knownPaths.PATH_CLIENT_FEATURES_TEST : knownPaths.PATH_CLIENT_FEATURES;\n  }\n\n  copyClient() {\n    this.generator.directory('tasks/client/aurelia1', 'tasks/client');\n    this.generator.directory('client/aurelia1', 'client');\n    this.generator.template('_karma.conf_aurelia1.js', 'karma.conf.js', {\n      testsSeparated: this.testsSeparated\n    });\n\n    if(this.testsSeparated) {\n      this.generator.directory('tests/client_aurelia1', 'tests/client');\n    } else {\n      let _pathTest = [\n        ['tests/client_aurelia1/todo/components/todo-cmp_test.js', 'client/dev/todo/components/todo-cmp_test.js'],\n        ['tests/client_aurelia1/todo/models/todo-model_test.js', 'client/dev/todo/models/todo-model_test.js'],\n        ['tests/client_aurelia1/todo/services/todo-service_test.js', 'client/dev/todo/services/todo-service_test.js']\n      ];\n\n      yoUtils.directory(this.generator, _pathTest, this.generator);\n    }\n\n    if (this.generator.stack === \"client\")  {\n      this.generator.template('_aurelia_jspm_config_serving_from_root.js', 'jspm.config.js');\n    } else {\n      this.generator.template('_aurelia_jspm_config_serving_from_jspm_packages.js', 'jspm.config.js');\n    }\n\n    this.generator.template('tasks/client/aurelia1/const.js', 'tasks/client/const.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    this.generator.template('tasks/client/aurelia1/build_css.js', 'tasks/client/build_css.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n\n    this.generator.template('tasks/client/aurelia1/watch.js', 'tasks/client/watch.js', {\n      secure: !!this.generator.secure,\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n     \n    copyStyleForMainGenerator(this.generator, 'client/dev/todo/styles/todo');\n  }\n\n  copyComponent(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'aurelia1/component.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/components/${this.generator.name}.js`, {\n        nameCapitalized: utils.capitalizeFirst(this.generator.name),\n        name: this.generator.name,\n        feature: this.generator.options.feature\n    });\n\n    this.generator.template(_pathTemplate + 'aurelia1/component.html',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/components/${this.generator.name}.html`, {\n        name: this.generator.name\n      }\n    );\n\n    this.generator.template(_pathTemplate + 'aurelia1/component.css',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/styles/${this.generator.name}.css`\n    );\n\n    this.generator.template(_pathTemplate + 'aurelia1/component_test.js',\n      `${this.testsPath + this.generator.options.feature}/components/${this.generator.name}_test.js`, {\n        name: utils.capitalizeFirst(this.generator.name),\n        nameLowerCase: this.generator.name.toLowerCase()\n    });\n  }\n\n  copyDirective(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'aurelia1/directive.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/directives/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'aurelia1/directive_test.js',\n      `${this.testsPath + this.generator.options.feature}/directives/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n\n  copyFactory(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'aurelia1/factory.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/factory/${this.generator.name}.js`, {\n        name: utils.capitalizeFirst(this.generator.name)\n    });\n\n    this.generator.template(_pathTemplate + 'aurelia1/factory_test.js',\n      `${this.testsPath + this.generator.options.feature}/factory/${this.generator.name}_test.js`, {\n        name: utils.capitalizeFirst(this.generator.name)\n    });\n  }\n\n  copyService(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'aurelia1/service.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/services/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'aurelia1/service_test.js',\n      `${this.testsPath + this.generator.options.feature}/services/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n  copyModel(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'aurelia1/model.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/models/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'aurelia1/model_test.js',\n      `${this.testsPath + this.generator.options.feature}/models/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n  copyFilter(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'aurelia1/filter.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/filters/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'aurelia1/filter_test.js',\n      `${this.testsPath + this.generator.options.feature}/filters/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n  copyStyle(pathTemplate) {\n    copyStyleForSubGenerator(this.generator, pathTemplate);\n  }\n\n  copyModule() {\n      this.copyComponent('../../component/templates/');\n      this.copyDirective('../../directive/templates/');\n      this.copyFactory('../../factory/templates/');\n      this.copyService('../../service/templates/');\n      this.copyModel('../../model/templates/');\n      this.copyStyle('../../style/templates/');\n  }\n}\n\nclass AureliaFactory {\n  static tokens() {\n    return {\n      AURELIA1: 'aurelia1'\n    };\n  }\n\n  static build(token, gen) {\n    switch(token) {\n      case AureliaFactory.tokens().AURELIA1: return new Aurelia1(gen);\n      default: throw new Error(`Invalid Aurelia token: ${token}.`);\n    }\n  }\n}\n\nexports.Aurelia1 = Aurelia1;\nexports.AureliaFactory = AureliaFactory;\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/vue.js":"'use strict';\n\nconst utils = require('../utils/utils');\nconst knownPaths = require('../utils/known_paths');\nconst yoUtils = require('../utils/yeoman-utils');\nconst {\n  copyStyleForSubGenerator,\n  copyStyleForMainGenerator,\n  normalizeStylePreprocessor\n} = require('./style');\n\nclass Vue2 {\n  constructor(gen) {\n    this.generator = gen;\n    this.testsSeparated = gen && gen.testsSeparated !== undefined && typeof(gen.testsSeparated) === \"boolean\" ? gen.testsSeparated : true;\n    this.testsPath = this.testsSeparated ? knownPaths.PATH_CLIENT_FEATURES_TEST : knownPaths.PATH_CLIENT_FEATURES;\n  }\n\n  copyClient() {\n    this.generator.directory('tasks/client/vue2', 'tasks/client');\n    this.generator.directory('client/vue2', 'client');\n    this.generator.template('_karma.conf_vue2.js', 'karma.conf.js', {\n      testsSeparated: this.testsSeparated\n    });\n\n    if(this.testsSeparated) {\n      this.generator.directory('tests/client_vue2', 'tests/client');\n    } else {\n      let _pathTest = [\n        ['tests/client_vue2/todo/components/todo-cmp_test.js', 'client/dev/todo/components/todo-cmp_test.js'],\n        ['tests/client_vue2/todo/models/todo-model_test.js', 'client/dev/todo/models/todo-model_test.js'],\n        ['tests/client_vue2/todo/services/todo-service_test.js', 'client/dev/todo/services/todo-service_test.js']\n      ];\n\n      yoUtils.directory(this.generator, _pathTest, this.generator);\n    }\n\n    this.generator.template('tasks/client/vue2/const.js', 'tasks/client/const.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    this.generator.template('tasks/client/vue2/build_css.js', 'tasks/client/build_css.js', {\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n\n    this.generator.template('tasks/client/vue2/watch.js', 'tasks/client/watch.js', {\n      secure: !!this.generator.secure,\n      stylePreprocessor: normalizeStylePreprocessor(this.generator.stylePreprocessor)\n    });\n    \n    copyStyleForMainGenerator(this.generator, 'client/dev/todo/styles/todo');\n  }\n\n  copyComponent(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'vue2/component.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/components/${this.generator.name}.js`, {\n        nameCapitalized: utils.capitalizeFirst(this.generator.name),\n        name: this.generator.name,\n        feature: this.generator.options.feature\n    });\n\n    this.generator.template(_pathTemplate + 'vue2/component.css',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/styles/${this.generator.name}.css`\n    );\n\n    this.generator.template(_pathTemplate + 'vue2/component_test.js',\n      `${this.testsPath + this.generator.options.feature}/components/${this.generator.name}_test.js`, {\n        name: utils.capitalizeFirst(this.generator.name),\n        nameLowerCase: this.generator.name.toLowerCase()\n    });\n  }\n\n  copyDirective(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'vue2/directive.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/directives/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'vue2/directive_test.js',\n      `${this.testsPath + this.generator.options.feature}/directives/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n\n  copyFactory(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'vue2/factory.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/factory/${this.generator.name}.js`, {\n        name: utils.capitalizeFirst(this.generator.name)\n    });\n\n    this.generator.template(_pathTemplate + 'vue2/factory_test.js',\n      `${this.testsPath + this.generator.options.feature}/factory/${this.generator.name}_test.js`, {\n        name: utils.capitalizeFirst(this.generator.name)\n    });\n  }\n\n  copyService(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'vue2/service.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/services/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'vue2/service_test.js',\n      `${this.testsPath + this.generator.options.feature}/services/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n  copyModel(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'vue2/model.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/models/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'vue2/model_test.js',\n      `${this.testsPath + this.generator.options.feature}/models/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n  copyFilter(pathTemplate) {\n    let _pathTemplate = pathTemplate || '';\n\n    this.generator.template(_pathTemplate + 'vue2/filter.js',\n      `${knownPaths.PATH_CLIENT_FEATURES + this.generator.options.feature}/filters/${this.generator.name}.js`, {\n        name: this.generator.name\n    });\n\n    this.generator.template(_pathTemplate + 'vue2/filter_test.js',\n      `${this.testsPath + this.generator.options.feature}/filters/${this.generator.name}_test.js`, {\n        name: this.generator.name\n    });\n  }\n\n  copyStyle(pathTemplate) {\n    copyStyleForSubGenerator(this.generator, pathTemplate);\n  }\n\n  copyModule() {\n      this.copyComponent('../../component/templates/');\n      this.copyDirective('../../directive/templates/');\n      this.copyFactory('../../factory/templates/');\n      this.copyService('../../service/templates/');\n      this.copyModel('../../model/templates/');\n      this.copyStyle('../../style/templates/');\n  }\n}\n\nclass VueFactory {\n  static tokens() {\n    return {\n      VUE2: 'vue2'\n    };\n  }\n\n  static build(token, gen) {\n    switch(token) {\n      case VueFactory.tokens().VUE2: return new Vue2(gen);\n      default: throw new Error(`Invalid Vue token: ${token}.`);\n    }\n  }\n}\n\nexports.Vue2 = Vue2;\nexports.VueFactory = VueFactory;\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/client_factory.js":"'use strict';\n\nconst {AngularFactory} = require('./angular');\nconst {VueFactory} = require('./vue');\nconst {AureliaFactory} = require('./aurelia');\n\nexports.ClientFactory = class ClientFactory {\n  static tokens() {\n    return {\n      ANGULAR: 'angular',\n      AURELIA: 'aurelia',\n      VUE: 'vue'\n    };\n  }\n\n  static create(client, token, gen) {\n    switch(client) {\n        case ClientFactory.tokens().ANGULAR: return AngularFactory.build(token, gen);\n        case ClientFactory.tokens().AURELIA: return AureliaFactory.build(token, gen);\n        case ClientFactory.tokens().VUE: return VueFactory.build(token, gen);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/server_factory.js":"\"use strict\";\n\nconst {NodeFactory} = require('./node_factory');\nconst {GoFactory} = require('./go_factory');\n\nexports.ServerFactory = class ServerFactory {\n  static tokens() {\n    return {\n      NODE: 'node',\n      GO: 'go'\n    };\n  }\n\n  static create(token, gen) {\n    switch(token) {\n      case ServerFactory.tokens().NODE: return NodeFactory.build(gen);\n      case ServerFactory.tokens().GO: return GoFactory.build(gen);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_aurelia_jspm_config_serving_from_jspm_packages.js":"System.config({\n  defaultJSExtensions: true,\n  transpiler: \"babel\",\n  babelOptions: {\n    \"optional\": [\n      \"runtime\",\n      \"optimisation.modules.system\",\n      \"es7.decorators\",\n      \"es7.classProperties\"\n    ]\n  },\n  paths: {\n    \"*\": \"client/dev/*\",\n    \"github:*\": \"github/*\",\n    \"npm:*\": \"npm/*\"\n  },\n  map: {\n    \"aurelia-bootstrapper\": \"npm:aurelia-bootstrapper@1.0.0\",\n    \"aurelia-framework\": \"npm:aurelia-framework@1.0.1\",\n    \"babel\": \"npm:babel-core@5.8.38\",\n    \"babel-runtime\": \"npm:babel-runtime@5.8.38\",\n    \"core-js\": \"npm:core-js@1.2.7\",\n    \"github:jspm/nodelibs-assert@0.1.0\": {\n      \"assert\": \"npm:assert@1.4.1\"\n    },\n    \"github:jspm/nodelibs-buffer@0.1.0\": {\n      \"buffer\": \"npm:buffer@3.6.0\"\n    },\n    \"github:jspm/nodelibs-path@0.1.0\": {\n      \"path-browserify\": \"npm:path-browserify@0.0.0\"\n    },\n    \"github:jspm/nodelibs-process@0.1.2\": {\n      \"process\": \"npm:process@0.11.6\"\n    },\n    \"github:jspm/nodelibs-util@0.1.0\": {\n      \"util\": \"npm:util@0.10.3\"\n    },\n    \"github:jspm/nodelibs-vm@0.1.0\": {\n      \"vm-browserify\": \"npm:vm-browserify@0.0.4\"\n    },\n    \"npm:assert@1.4.1\": {\n      \"assert\": \"github:jspm/nodelibs-assert@0.1.0\",\n      \"buffer\": \"github:jspm/nodelibs-buffer@0.1.0\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\",\n      \"util\": \"npm:util@0.10.3\"\n    },\n    \"npm:aurelia-binding@1.0.0\": {\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\"\n    },\n    \"npm:aurelia-bootstrapper@1.0.0\": {\n      \"aurelia-event-aggregator\": \"npm:aurelia-event-aggregator@1.0.0\",\n      \"aurelia-framework\": \"npm:aurelia-framework@1.0.1\",\n      \"aurelia-history\": \"npm:aurelia-history@1.0.0\",\n      \"aurelia-history-browser\": \"npm:aurelia-history-browser@1.0.0\",\n      \"aurelia-loader-default\": \"npm:aurelia-loader-default@1.0.0\",\n      \"aurelia-logging-console\": \"npm:aurelia-logging-console@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-pal-browser\": \"npm:aurelia-pal-browser@1.0.0\",\n      \"aurelia-polyfills\": \"npm:aurelia-polyfills@1.0.0\",\n      \"aurelia-router\": \"npm:aurelia-router@1.0.2\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\",\n      \"aurelia-templating-binding\": \"npm:aurelia-templating-binding@1.0.0\",\n      \"aurelia-templating-resources\": \"npm:aurelia-templating-resources@1.0.0\",\n      \"aurelia-templating-router\": \"npm:aurelia-templating-router@1.0.0\"\n    },\n    \"npm:aurelia-dependency-injection@1.0.0\": {\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-event-aggregator@1.0.0\": {\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\"\n    },\n    \"npm:aurelia-framework@1.0.1\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-history-browser@1.0.0\": {\n      \"aurelia-history\": \"npm:aurelia-history@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-loader-default@1.0.0\": {\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-loader@1.0.0\": {\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\"\n    },\n    \"npm:aurelia-logging-console@1.0.0\": {\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\"\n    },\n    \"npm:aurelia-metadata@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-pal-browser@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-polyfills@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-route-recognizer@1.0.0\": {\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\"\n    },\n    \"npm:aurelia-router@1.0.2\": {\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-event-aggregator\": \"npm:aurelia-event-aggregator@1.0.0\",\n      \"aurelia-history\": \"npm:aurelia-history@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-route-recognizer\": \"npm:aurelia-route-recognizer@1.0.0\"\n    },\n    \"npm:aurelia-task-queue@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-templating-binding@1.0.0\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-templating-resources@1.0.0\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-templating-router@1.0.0\": {\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-router\": \"npm:aurelia-router@1.0.2\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-templating@1.0.0\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\"\n    },\n    \"npm:babel-runtime@5.8.38\": {\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:buffer@3.6.0\": {\n      \"base64-js\": \"npm:base64-js@0.0.8\",\n      \"child_process\": \"github:jspm/nodelibs-child_process@0.1.0\",\n      \"fs\": \"github:jspm/nodelibs-fs@0.1.2\",\n      \"ieee754\": \"npm:ieee754@1.1.6\",\n      \"isarray\": \"npm:isarray@1.0.0\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:core-js@1.2.7\": {\n      \"fs\": \"github:jspm/nodelibs-fs@0.1.2\",\n      \"path\": \"github:jspm/nodelibs-path@0.1.0\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\",\n      \"systemjs-json\": \"github:systemjs/plugin-json@0.1.2\"\n    },\n    \"npm:inherits@2.0.1\": {\n      \"util\": \"github:jspm/nodelibs-util@0.1.0\"\n    },\n    \"npm:path-browserify@0.0.0\": {\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:process@0.11.6\": {\n      \"assert\": \"github:jspm/nodelibs-assert@0.1.0\",\n      \"fs\": \"github:jspm/nodelibs-fs@0.1.2\",\n      \"vm\": \"github:jspm/nodelibs-vm@0.1.0\"\n    },\n    \"npm:util@0.10.3\": {\n      \"inherits\": \"npm:inherits@2.0.1\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:vm-browserify@0.0.4\": {\n      \"indexof\": \"npm:indexof@0.0.1\"\n    }\n  }\n});","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_aurelia_jspm_config_serving_from_root.js":"System.config({\n  defaultJSExtensions: true,\n  transpiler: \"babel\",\n  babelOptions: {\n    \"optional\": [\n      \"runtime\",\n      \"optimisation.modules.system\",\n      \"es7.decorators\",\n      \"es7.classProperties\"\n    ]\n  },\n  paths: {\n    \"*\": \"client/dev/*\",\n    \"github:*\": \"jspm_packages/github/*\",\n    \"npm:*\": \"jspm_packages/npm/*\"\n  },\n  map: {\n    \"aurelia-bootstrapper\": \"npm:aurelia-bootstrapper@1.0.0\",\n    \"aurelia-framework\": \"npm:aurelia-framework@1.0.1\",\n    \"babel\": \"npm:babel-core@5.8.38\",\n    \"babel-runtime\": \"npm:babel-runtime@5.8.38\",\n    \"core-js\": \"npm:core-js@1.2.7\",\n    \"github:jspm/nodelibs-assert@0.1.0\": {\n      \"assert\": \"npm:assert@1.4.1\"\n    },\n    \"github:jspm/nodelibs-buffer@0.1.0\": {\n      \"buffer\": \"npm:buffer@3.6.0\"\n    },\n    \"github:jspm/nodelibs-path@0.1.0\": {\n      \"path-browserify\": \"npm:path-browserify@0.0.0\"\n    },\n    \"github:jspm/nodelibs-process@0.1.2\": {\n      \"process\": \"npm:process@0.11.6\"\n    },\n    \"github:jspm/nodelibs-util@0.1.0\": {\n      \"util\": \"npm:util@0.10.3\"\n    },\n    \"github:jspm/nodelibs-vm@0.1.0\": {\n      \"vm-browserify\": \"npm:vm-browserify@0.0.4\"\n    },\n    \"npm:assert@1.4.1\": {\n      \"assert\": \"github:jspm/nodelibs-assert@0.1.0\",\n      \"buffer\": \"github:jspm/nodelibs-buffer@0.1.0\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\",\n      \"util\": \"npm:util@0.10.3\"\n    },\n    \"npm:aurelia-binding@1.0.0\": {\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\"\n    },\n    \"npm:aurelia-bootstrapper@1.0.0\": {\n      \"aurelia-event-aggregator\": \"npm:aurelia-event-aggregator@1.0.0\",\n      \"aurelia-framework\": \"npm:aurelia-framework@1.0.1\",\n      \"aurelia-history\": \"npm:aurelia-history@1.0.0\",\n      \"aurelia-history-browser\": \"npm:aurelia-history-browser@1.0.0\",\n      \"aurelia-loader-default\": \"npm:aurelia-loader-default@1.0.0\",\n      \"aurelia-logging-console\": \"npm:aurelia-logging-console@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-pal-browser\": \"npm:aurelia-pal-browser@1.0.0\",\n      \"aurelia-polyfills\": \"npm:aurelia-polyfills@1.0.0\",\n      \"aurelia-router\": \"npm:aurelia-router@1.0.2\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\",\n      \"aurelia-templating-binding\": \"npm:aurelia-templating-binding@1.0.0\",\n      \"aurelia-templating-resources\": \"npm:aurelia-templating-resources@1.0.0\",\n      \"aurelia-templating-router\": \"npm:aurelia-templating-router@1.0.0\"\n    },\n    \"npm:aurelia-dependency-injection@1.0.0\": {\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-event-aggregator@1.0.0\": {\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\"\n    },\n    \"npm:aurelia-framework@1.0.1\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-history-browser@1.0.0\": {\n      \"aurelia-history\": \"npm:aurelia-history@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-loader-default@1.0.0\": {\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-loader@1.0.0\": {\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\"\n    },\n    \"npm:aurelia-logging-console@1.0.0\": {\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\"\n    },\n    \"npm:aurelia-metadata@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-pal-browser@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-polyfills@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-route-recognizer@1.0.0\": {\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\"\n    },\n    \"npm:aurelia-router@1.0.2\": {\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-event-aggregator\": \"npm:aurelia-event-aggregator@1.0.0\",\n      \"aurelia-history\": \"npm:aurelia-history@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-route-recognizer\": \"npm:aurelia-route-recognizer@1.0.0\"\n    },\n    \"npm:aurelia-task-queue@1.0.0\": {\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\"\n    },\n    \"npm:aurelia-templating-binding@1.0.0\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-templating-resources@1.0.0\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-templating-router@1.0.0\": {\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-router\": \"npm:aurelia-router@1.0.2\",\n      \"aurelia-templating\": \"npm:aurelia-templating@1.0.0\"\n    },\n    \"npm:aurelia-templating@1.0.0\": {\n      \"aurelia-binding\": \"npm:aurelia-binding@1.0.0\",\n      \"aurelia-dependency-injection\": \"npm:aurelia-dependency-injection@1.0.0\",\n      \"aurelia-loader\": \"npm:aurelia-loader@1.0.0\",\n      \"aurelia-logging\": \"npm:aurelia-logging@1.0.0\",\n      \"aurelia-metadata\": \"npm:aurelia-metadata@1.0.0\",\n      \"aurelia-pal\": \"npm:aurelia-pal@1.0.0\",\n      \"aurelia-path\": \"npm:aurelia-path@1.0.0\",\n      \"aurelia-task-queue\": \"npm:aurelia-task-queue@1.0.0\"\n    },\n    \"npm:babel-runtime@5.8.38\": {\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:buffer@3.6.0\": {\n      \"base64-js\": \"npm:base64-js@0.0.8\",\n      \"child_process\": \"github:jspm/nodelibs-child_process@0.1.0\",\n      \"fs\": \"github:jspm/nodelibs-fs@0.1.2\",\n      \"ieee754\": \"npm:ieee754@1.1.6\",\n      \"isarray\": \"npm:isarray@1.0.0\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:core-js@1.2.7\": {\n      \"fs\": \"github:jspm/nodelibs-fs@0.1.2\",\n      \"path\": \"github:jspm/nodelibs-path@0.1.0\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\",\n      \"systemjs-json\": \"github:systemjs/plugin-json@0.1.2\"\n    },\n    \"npm:inherits@2.0.1\": {\n      \"util\": \"github:jspm/nodelibs-util@0.1.0\"\n    },\n    \"npm:path-browserify@0.0.0\": {\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:process@0.11.6\": {\n      \"assert\": \"github:jspm/nodelibs-assert@0.1.0\",\n      \"fs\": \"github:jspm/nodelibs-fs@0.1.2\",\n      \"vm\": \"github:jspm/nodelibs-vm@0.1.0\"\n    },\n    \"npm:util@0.10.3\": {\n      \"inherits\": \"npm:inherits@2.0.1\",\n      \"process\": \"github:jspm/nodelibs-process@0.1.2\"\n    },\n    \"npm:vm-browserify@0.0.4\": {\n      \"indexof\": \"npm:indexof@0.0.1\"\n    }\n  }\n});","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_gulpfile.babel.js":"require('require-dir')('tasks');\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_karma.conf_aurelia1.js":"// Karma configuration\n// Generated on Fri Dec 05 2014 16:49:29 GMT-0500 (EST)\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jspm', 'jasmine'],\n\n    jspm: {\n      // Edit this to your needs\n      loadFiles: ['test/unit/setup.js', 'test/unit/**/*.js'],\n      serveFiles: ['src/**/*.*'],\n      paths: {\n        '*': 'src/*',\n        'test/*': 'test/*',\n        'github:*': 'jspm_packages/github/*',\n        'npm:*': 'jspm_packages/npm/*'\n      }\n    },\n\n    // list of files / patterns to load in the browser\n    files: [],\n\n    // list of files to exclude\n    exclude: [],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n      'test/**/*.js': ['babel'],\n      'src/**/*.js': ['babel']\n    },\n    'babelPreprocessor': {\n      options: {\n        sourceMap: 'inline',\n        presets: [ 'es2015-loose', 'stage-1'],\n        plugins: [\n          'syntax-flow',\n          'transform-decorators-legacy',\n          'transform-flow-strip-types'\n        ]\n      }\n    },\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress'],\n\n    // web server port\n    port: 9876,\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome'],\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false\n  });\n};","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_karma.conf.js":"'use strict';\n\nmodule.exports = (config) => {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n        'client/dev/bower_components/jquery/dist/jquery.min.js',\n        'client/dev/bower_components/angular/angular.min.js',\n        'client/dev/bower_components/angular-resource/angular-resource.min.js',\n        'client/dev/bower_components/angular-route/angular-route.min.js',\n\n        'client/dev/bower_components/angular-mocks/angular-mocks.js',\n\n        'client/dev/app.js',\n        'client/dev/app.config.js',\n        'client/dev/app.route.js',\n        'client/dev/!(bower_components)/**/*.js',\n\n        <% if (testsSeparated) { %>\n        'tests/client/**/*_test.js',\n        <% } else { %>\n        'client/dev/**/*_test.js',\n        <% } %>\n        'client/dev/**/*.html' // for templateUrl testing\n    ],\n\n    // list of files to exclude\n    exclude: [],\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['dots', 'coverage'],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n      'client/dev/!(bower_components)/**/*.js': ['coverage'],\n      'client/dev/**/*.html': ['ng-html2js']\n    },\n\n    ngHtml2JsPreprocessor: {\n      stripPrefix: 'client/dev/',\n      moduleName: 'my.includes'\n    },\n\n    coverageReporter: {\n      type : 'lcov',\n      dir : 'unit_coverage/'\n    },\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome', 'Firefox', 'FirefoxNightly', 'ChromeCanary', 'IE', 'Safari', 'PhantomJS'],\n\n    captureTimeout: 120000,\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: true\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_karma.conf_ng2.js":"module.exports = function(config) {\n  config.set({\n\n    basePath: '',\n\n    frameworks: ['jasmine'],\n\n    files: [\n      // paths loaded by Karma\n      'node_modules/reflect-metadata/Reflect.js',\n\n      // System.js for module loading\n      'node_modules/systemjs/dist/system-polyfills.js',\n      'node_modules/systemjs/dist/system.src.js',\n\n      // Zone.js dependencies\n      'node_modules/zone.js/dist/zone.js',\n      'node_modules/zone.js/dist/jasmine-patch.js',\n      'node_modules/zone.js/dist/async-test.js',\n      'node_modules/zone.js/dist/fake-async-test.js',\n\n      {pattern: 'node_modules/rxjs/**/*.js', included: false, watched: false},\n      {pattern: 'node_modules/rxjs/**/*.js.map', included: false, watched: false},\n\n      {pattern: 'karma-test-shim.js', included: true, watched: true},\n\n      // paths loaded via module imports\n      // Angular itself\n      {pattern: 'node_modules/@angular/**/*.js', included: false, watched: true},\n      {pattern: 'node_modules/@angular/**/*.js.map', included: false, watched: true},\n\n      // paths loaded via module imports\n      {pattern: 'client/dev/**/*.js', included: false, watched: true},\n\n      // paths loaded via Angular's component compiler\n      // (these paths need to be rewritten, see proxies section)\n      {pattern: 'client/dev/**/*.html', included: false, watched: true},\n      {pattern: 'client/dev/**/*.css', included: false, watched: true},\n\n      // paths to support debugging with source maps in dev tools\n      {pattern: 'client/dev/**/*.ts', included: false, watched: false},\n      {pattern: 'client/dev/**/*.js.map', included: false, watched: false},\n\n      <% if (testsSeparated) { %>\n      {pattern: 'tests/client/**/*_test.js', included: false, watched: false},\n      <% } else { %>\n      {pattern: 'client/dev/**/*_test.js', included: false, watched: false}\n      <% } %>\n\n    ],\n\n    // proxied base paths\n    proxies: {\n      // required for component assests fetched by Angular's compiler\n      \"/app/\": \"/base/client/dev/\"\n    },\n\n    reporters: ['progress'],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: true,\n    browsers: ['Chrome'],\n    singleRun: true\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_karma.conf_vue2.js":"'use strict';\n\nmodule.exports = (config) => {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n        'client/dev/bower_components/jquery/dist/jquery.min.js',\n        'client/dev/bower_components/vue/vue.min.js',\n\n        '!(node_modules)/**/*.js',\n\n        <% if (testsSeparated) { %>\n        'tests/client/**/*_test.js',\n        <% } else { %>\n        'client/dev/**/*_test.js',\n        <% } %>\n        'client/dev/**/*.html' // for templateUrl testing\n    ],\n\n    // list of files to exclude\n    exclude: [],\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['dots', 'coverage'],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n      'client/dev/**/*.js': ['coverage'],\n      'client/dev/**/*.html': ['ng-html2js']\n    },\n\n    ngHtml2JsPreprocessor: {\n      stripPrefix: 'client/dev/',\n      moduleName: 'my.includes'\n    },\n\n    coverageReporter: {\n      type : 'lcov',\n      dir : 'unit_coverage/'\n    },\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome', 'Firefox', 'FirefoxNightly', 'ChromeCanary', 'IE', 'Safari', 'PhantomJS'],\n\n    captureTimeout: 120000,\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: true\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_newrelic.js":"/**\n * New Relic agent configuration.\n *\n * See lib/config.defaults.js in the agent distribution for a more complete\n * description of configuration variables and their potential values.\n */\nexports.config = {\n  /**\n   * Array of application names.\n   */\n  app_name : [process.env.NEW_RELIC_APP_NAME],\n  /**\n   * Your New Relic license key.\n   */\n  license_key : process.env.NEW_RELIC_LICENSE_KEY,\n  logging : {\n    /**\n     * Level at which to log. 'trace' is most useful to New Relic when diagnosing\n     * issues with the agent, 'info' and higher will impose the least overhead on\n     * production applications.\n     */\n    level : 'trace'\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_ng2_systemjs_config_serving_from_root.js":"System.config({\n\tdefaultJSExtensions: true,\n  paths: {\n    // paths serve as alias\n    'npm:': 'node_modules/'\n  },\n  // map tells the System loader where to look for things\n  map: {\n    // our app is within the app folder\n    app: 'app',\n\n    // angular bundles\n    '@angular/core': 'npm:@angular/core/bundles/core.umd.js',\n    '@angular/common': 'npm:@angular/common/bundles/common.umd.js',\n    '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\n    '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\n    '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n    '@angular/http': 'npm:@angular/http/bundles/http.umd.js',\n    '@angular/router': 'npm:@angular/router/bundles/router.umd.js',\n    '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\n\n    // other libraries\n    'rxjs':                       'npm:rxjs'\n  }\n});","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/app/templates/_protractor.conf.js":"exports.config = {\n    specs: ['./tests/e2e/**/*_test.js'],\n    baseUrl: 'http://localhost:3333/'\n}\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_component.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {AngularFactory} = require('./angular');\nconst {VueFactory} = require('./vue');\nconst {AureliaFactory} = require('./aurelia');\nconst {FeatureMissingError} = require('../utils/errors');\n\nexports.ComponentSubGenerator = class ComponentSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'component'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if (_client === AngularFactory.tokens().NG1) {\n      return AngularFactory.build(_client, this.wrapper).copyComponent();\n    }\n\n    if (_client === AngularFactory.tokens().NG2) {\n      return AngularFactory.build(_client, this.wrapper).copyComponent();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(_client, this.wrapper).copyComponent();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(_client, this.wrapper).copyComponent();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/utils/options_parser.js":"'use strict';\n\nexports.getFeature = (opt) => {\n    return opt && opt.feature ? opt.feature + '/' : '';\n};\n\nexports.isServerOnly = (opt) => {\n    return opt ? !!opt.serverOnly : false;\n};\n\nexports.isClientOnly = (opt) => {\n    return opt ? !!opt.clientOnly : false;\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/utils/errors.js":"'use strict';\n\nclass ExtendableError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    Error.captureStackTrace(this, this.constructor.name);\n  }\n}\n\nexports.FeatureMissingError = class FeatureMissingError extends ExtendableError {\n  constructor() {\n    super('Feature is needed. Do it like this: --feature something-here');\n  }\n};\n\nexports.ModuleDoesntImplementError = class ModuleDoesntImplementError extends ExtendableError {\n  constructor(module, subGenerator) {\n    super(`${module} doesn't implement ${subGenerator}.`);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_controller.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {AngularFactory} = require('./angular');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {ModuleDoesntImplementError} = require('../utils/errors');\n\nexports.ControllerSubGenerator = class ControllerSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'controller_client'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if (_client !== AngularFactory.tokens().NG1) {\n      throw new ModuleDoesntImplementError(_client, 'controller');\n    }\n\n    AngularFactory.build(AngularFactory.tokens().NG1, this.wrapper).copyController();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_decorator.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {AngularFactory} = require('./angular');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {ModuleDoesntImplementError} = require('../utils/errors');\n\nexports.DecoratorSubGenerator = class DecoratorSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'decorator'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if (_client !== AngularFactory.tokens().NG1) {\n      throw new ModuleDoesntImplementError(_client, 'decorator');\n    }\n\n    AngularFactory.build(AngularFactory.tokens().NG1, this.wrapper).copyDecorator();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_directive.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {AngularFactory} = require('./angular');\nconst {AureliaFactory} = require('./aurelia');\nconst {VueFactory} = require('./vue');\n\nexports.DirectiveSubGenerator = class DirectiveSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'directive'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if ((_client === AngularFactory.tokens().NG1) || (_client === AngularFactory.tokens().NG2)) {\n      return AngularFactory.build(this.wrapper.client, this.wrapper).copyDirective();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(this.wrapper.client, this.wrapper).copyDirective();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(_client, this.wrapper).copyDirective();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_factory.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {AngularFactory} = require('./angular');\nconst {AureliaFactory} = require('./aurelia');\nconst {VueFactory} = require('./vue');\n\nexports.FactorySubGenerator = class FactorySubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'factory'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if ((_client === AngularFactory.tokens().NG1) || (_client === AngularFactory.tokens().NG2)) {\n      return AngularFactory.build(this.wrapper.client, this.wrapper).copyFactory();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(this.wrapper.client, this.wrapper).copyFactory();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(_client, this.wrapper).copyFactory();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_filter.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {ModuleDoesntImplementError} = require('../utils/errors');\nconst {AngularFactory} = require('./angular');\nconst {AureliaFactory} = require('./aurelia');\nconst {VueFactory} = require('./vue');\n\nexports.FilterSubGenerator = class FilterSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'filter'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if (_client === AngularFactory.tokens().NG1) {\n      return AngularFactory.build(_client, this.wrapper).copyFilter();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(_client, this.wrapper).copyFilter();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(_client, this.wrapper).copyFilter();\n    }\n\n    throw new ModuleDoesntImplementError(_client, 'filter');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_model.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {AngularFactory} = require('./angular');\nconst {AureliaFactory} = require('./aurelia');\nconst {VueFactory} = require('./vue');\n\nexports.ModelSubGenerator = class ModelSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'model'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if ((_client === AngularFactory.tokens().NG1) || (_client === AngularFactory.tokens().NG2)) {\n      return AngularFactory.build(this.wrapper.client, this.wrapper).copyModel();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(this.wrapper.client, this.wrapper).copyModel();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(_client, this.wrapper).copyModel();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_module.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {AngularFactory} = require('./angular');\nconst {AureliaFactory} = require('./aurelia');\nconst {VueFactory} = require('./vue');\n\nexports.ModuleSubGenerator = class ModuleSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'module'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if ((_client === AngularFactory.tokens().NG1) || (_client === AngularFactory.tokens().NG2)) {\n      return AngularFactory.build(this.wrapper.client, this.wrapper).copyModule();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(this.wrapper.client, this.wrapper).copyModule();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(_client, this.wrapper).copyModule();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_pipe.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {AngularFactory} = require('./angular');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {ModuleDoesntImplementError} = require('../utils/errors');\n\nexports.PipeSubGenerator = class PipeSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'pipe'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if (_client !== AngularFactory.tokens().NG2) {\n      throw new ModuleDoesntImplementError(_client, 'pipe');\n    }\n\n    AngularFactory.build(AngularFactory.tokens().NG2, this.wrapper).copyPipe();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_resource.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {AngularFactory} = require('./angular');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {ModuleDoesntImplementError} = require('../utils/errors');\n\nexports.ResourceSubGenerator = class ResourceSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'resource'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if (_client !== AngularFactory.tokens().NG1) {\n      throw new ModuleDoesntImplementError(_client, 'resource');\n    }\n\n    AngularFactory.build(AngularFactory.tokens().NG1, this.wrapper).copyResource();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_service.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {AngularFactory} = require('./angular');\nconst {AureliaFactory} = require('./aurelia');\nconst {VueFactory} = require('./vue');\n\nexports.ServiceSubGenerator = class ServiceSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'service'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if ((_client === AngularFactory.tokens().NG1) || (_client === AngularFactory.tokens().NG2)) {\n      return AngularFactory.build(this.wrapper.client, this.wrapper).copyService();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(this.wrapper.client, this.wrapper).copyService();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(this.wrapper.client, this.wrapper).copyService();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_style.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {FeatureMissingError} = require('../utils/errors');\nconst {AngularFactory} = require('./angular');\nconst {AureliaFactory} = require('./aurelia');\nconst {VueFactory} = require('./vue');\n\nexports.StyleSubGenerator = class StyleSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n    this.wrapper.stylePreprocessor = this.wrapper.config.get('stylePreprocessor');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'style'\n    });\n  }\n\n  writing() {\n    let _feature = optionsParser.getFeature(this.wrapper.options);\n    let _client = this.wrapper.client;\n\n    if (!_feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    if ((_client === AngularFactory.tokens().NG1) || (_client === AngularFactory.tokens().NG2)) {\n      return AngularFactory.build(this.wrapper.client, this.wrapper).copyStyle();\n    }\n\n    if (_client === VueFactory.tokens().VUE2) {\n      return VueFactory.build(this.wrapper.client, this.wrapper).copyStyle();\n    }\n\n    if (_client === AureliaFactory.tokens().AURELIA1) {\n      return AureliaFactory.build(this.wrapper.client, this.wrapper).copyStyle();\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/client/sub_generators_view.js":"'use strict';\n\nconst optionsParser = require('../utils/options_parser');\nconst {AngularFactory} = require('./angular');\nconst {FeatureMissingError} = require('../utils/errors');\n\nexports.ViewSubGenerator = class ViewSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.client = this.wrapper.config.get('client');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'view'\n    });\n  }\n\n  writing() {\n    let feature = optionsParser.getFeature(this.wrapper.options);\n\n    if (!feature.length) {\n      throw new FeatureMissingError();\n    }\n\n    AngularFactory.build(this.wrapper.client, this.wrapper).copyTemplate();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng-fullstack/node_modules/generator-ng-fullstack/_ng/server/sub_generators_endpoint.js":"\"use strict\";\n\nconst optionsParser = require('../utils/options_parser');\nconst {ServerFactory} = require('./server_factory');\nconst {NodeFactory} = require('./node_factory');\nconst {GoFactory} = require('./go_factory');\nconst {FeatureMissingError} = require('../utils/errors');\n\nexports.EndpointSubGenerator = class EndpointSubGenerator {\n  constructor(generator) {\n    this.wrapper = generator;\n    this.wrapper.feature  = optionsParser.getFeature(this.wrapper.options);\n    this.wrapper.name = this.wrapper.name;\n    this.wrapper.userNameSpace = this.wrapper.config.get('userNameSpace');\n    this.wrapper.appName = this.wrapper.config.get('appName');\n    this.wrapper.server = this.wrapper.config.get('server');\n    this.wrapper.transpilerServer = this.wrapper.config.get('transpilerServer');\n\n    if (this.wrapper.server === ServerFactory.tokens().NODE) {\n      this.wrapper.nodeWebFrameworkServer = this.wrapper.config.get('nodeWebFrameworkServer');\n    } else {\n      this.wrapper.goWebFrameworkServer = this.wrapper.config.get('goWebFrameworkServer');\n    }\n\n    this.wrapper.testsSeparated = this.wrapper.config.get('testsSeparated');\n  }\n\n  initializing() {\n    this.wrapper.argument('name', {\n      required: true,\n      type: String,\n      desc: 'endpoint'\n    });\n  }\n\n  writing() {\n    if (!this.wrapper.feature.length)\n        throw new FeatureMissingError();\n\n    switch (this.wrapper.server) {\n        case ServerFactory.tokens().GO: GoFactory.build(this.wrapper).copyFiles(); break;\n        case ServerFactory.tokens().NODE: NodeFactory.build(this.wrapper).copyFiles(); break;\n    }\n  }\n};\n"}